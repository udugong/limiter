// Code generated by MockGen. DO NOT EDIT.
// Source: ./local_slide_window.go

// Package queuemocks is a generated GoMock package.
package queuemocks

import (
	reflect "reflect"
	time "time"

	ratelimit "github.com/udugong/limiter/internal/ratelimit"
	gomock "go.uber.org/mock/gomock"
)

// MockBoundedQueue is a mock of BoundedQueue interface.
type MockBoundedQueue struct {
	ctrl     *gomock.Controller
	recorder *MockBoundedQueueMockRecorder
}

// MockBoundedQueueMockRecorder is the mock recorder for MockBoundedQueue.
type MockBoundedQueueMockRecorder struct {
	mock *MockBoundedQueue
}

// NewMockBoundedQueue creates a new mock instance.
func NewMockBoundedQueue(ctrl *gomock.Controller) *MockBoundedQueue {
	mock := &MockBoundedQueue{ctrl: ctrl}
	mock.recorder = &MockBoundedQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoundedQueue) EXPECT() *MockBoundedQueueMockRecorder {
	return m.recorder
}

// Dequeue mocks base method.
func (m *MockBoundedQueue) Dequeue() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dequeue")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dequeue indicates an expected call of Dequeue.
func (mr *MockBoundedQueueMockRecorder) Dequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dequeue", reflect.TypeOf((*MockBoundedQueue)(nil).Dequeue))
}

// Enqueue mocks base method.
func (m *MockBoundedQueue) Enqueue(val time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockBoundedQueueMockRecorder) Enqueue(val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockBoundedQueue)(nil).Enqueue), val)
}

// IsFull mocks base method.
func (m *MockBoundedQueue) IsFull() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFull")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFull indicates an expected call of IsFull.
func (mr *MockBoundedQueueMockRecorder) IsFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFull", reflect.TypeOf((*MockBoundedQueue)(nil).IsFull))
}

// Peek mocks base method.
func (m *MockBoundedQueue) Peek() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MockBoundedQueueMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockBoundedQueue)(nil).Peek))
}

// MockOption is a mock of Option interface.
type MockOption struct {
	ctrl     *gomock.Controller
	recorder *MockOptionMockRecorder
}

// MockOptionMockRecorder is the mock recorder for MockOption.
type MockOptionMockRecorder struct {
	mock *MockOption
}

// NewMockOption creates a new mock instance.
func NewMockOption(ctrl *gomock.Controller) *MockOption {
	mock := &MockOption{ctrl: ctrl}
	mock.recorder = &MockOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOption) EXPECT() *MockOptionMockRecorder {
	return m.recorder
}

// apply mocks base method.
func (m *MockOption) apply(arg0 *ratelimit.LocalSlideWindowLimiter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "apply", arg0)
}

// apply indicates an expected call of apply.
func (mr *MockOptionMockRecorder) apply(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "apply", reflect.TypeOf((*MockOption)(nil).apply), arg0)
}
